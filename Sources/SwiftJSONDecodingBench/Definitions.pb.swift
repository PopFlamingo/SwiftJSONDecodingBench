// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Definitions.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct A {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: Int64 = 0

  var b: Int64 = 0

  var c: Int64 = 0

  var d: Int64 = 0

  var e: Int64 = 0

  var f: Int64 = 0

  var g: Int64 = 0

  var h: Int64 = 0

  var i: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct B {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: String = String()

  var b: Bool = false

  var c: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct C {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: [Int64] = []

  var b: [Bool] = []

  var c: [Double] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct D {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var a: String = String()

  var b: Int64 = 0

  var c: SwiftProtobuf.Google_Protobuf_Value {
    get {return _c ?? SwiftProtobuf.Google_Protobuf_Value()}
    set {_c = newValue}
  }
  /// Returns true if `c` has been explicitly set.
  var hasC: Bool {return self._c != nil}
  /// Clears the value of `c`. Subsequent reads from it will return its default value.
  mutating func clearC() {self._c = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _c: SwiftProtobuf.Google_Protobuf_Value? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension A: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "A"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
    3: .same(proto: "c"),
    4: .same(proto: "d"),
    5: .same(proto: "e"),
    6: .same(proto: "f"),
    7: .same(proto: "g"),
    8: .same(proto: "h"),
    9: .same(proto: "i"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.a) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.b) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.c) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.d) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.e) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.f) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.g) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.h) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.i) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.a != 0 {
      try visitor.visitSingularInt64Field(value: self.a, fieldNumber: 1)
    }
    if self.b != 0 {
      try visitor.visitSingularInt64Field(value: self.b, fieldNumber: 2)
    }
    if self.c != 0 {
      try visitor.visitSingularInt64Field(value: self.c, fieldNumber: 3)
    }
    if self.d != 0 {
      try visitor.visitSingularInt64Field(value: self.d, fieldNumber: 4)
    }
    if self.e != 0 {
      try visitor.visitSingularInt64Field(value: self.e, fieldNumber: 5)
    }
    if self.f != 0 {
      try visitor.visitSingularInt64Field(value: self.f, fieldNumber: 6)
    }
    if self.g != 0 {
      try visitor.visitSingularInt64Field(value: self.g, fieldNumber: 7)
    }
    if self.h != 0 {
      try visitor.visitSingularInt64Field(value: self.h, fieldNumber: 8)
    }
    if self.i != 0 {
      try visitor.visitSingularInt64Field(value: self.i, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: A, rhs: A) -> Bool {
    if lhs.a != rhs.a {return false}
    if lhs.b != rhs.b {return false}
    if lhs.c != rhs.c {return false}
    if lhs.d != rhs.d {return false}
    if lhs.e != rhs.e {return false}
    if lhs.f != rhs.f {return false}
    if lhs.g != rhs.g {return false}
    if lhs.h != rhs.h {return false}
    if lhs.i != rhs.i {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension B: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "B"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
    3: .same(proto: "c"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.a) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.b) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.c) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.a.isEmpty {
      try visitor.visitSingularStringField(value: self.a, fieldNumber: 1)
    }
    if self.b != false {
      try visitor.visitSingularBoolField(value: self.b, fieldNumber: 2)
    }
    if self.c != 0 {
      try visitor.visitSingularDoubleField(value: self.c, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: B, rhs: B) -> Bool {
    if lhs.a != rhs.a {return false}
    if lhs.b != rhs.b {return false}
    if lhs.c != rhs.c {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension C: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "C"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
    3: .same(proto: "c"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedInt64Field(value: &self.a) }()
      case 2: try { try decoder.decodeRepeatedBoolField(value: &self.b) }()
      case 3: try { try decoder.decodeRepeatedDoubleField(value: &self.c) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.a.isEmpty {
      try visitor.visitPackedInt64Field(value: self.a, fieldNumber: 1)
    }
    if !self.b.isEmpty {
      try visitor.visitPackedBoolField(value: self.b, fieldNumber: 2)
    }
    if !self.c.isEmpty {
      try visitor.visitPackedDoubleField(value: self.c, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: C, rhs: C) -> Bool {
    if lhs.a != rhs.a {return false}
    if lhs.b != rhs.b {return false}
    if lhs.c != rhs.c {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension D: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "D"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "a"),
    2: .same(proto: "b"),
    3: .same(proto: "c"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.a) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.b) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._c) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.a.isEmpty {
      try visitor.visitSingularStringField(value: self.a, fieldNumber: 1)
    }
    if self.b != 0 {
      try visitor.visitSingularInt64Field(value: self.b, fieldNumber: 2)
    }
    try { if let v = self._c {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: D, rhs: D) -> Bool {
    if lhs.a != rhs.a {return false}
    if lhs.b != rhs.b {return false}
    if lhs._c != rhs._c {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
